name: Database Seeder

on:
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: 'app-medusashop-prod'
  ACR_NAME: 'acrmedusashopprod'

jobs:
  seed-database:
    name: Seed Database
    runs-on: ubuntu-latest

    steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get connection strings from App Service
        id: get-config
        run: |
          DATABASE_URL=$(az webapp config appsettings list \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group rg-medusashop-prod \
            --query "[?name=='DATABASE_URL'].value | [0]" \
            -o tsv)

          REDIS_URL=$(az webapp config appsettings list \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group rg-medusashop-prod \
            --query "[?name=='REDIS_URL'].value | [0]" \
            -o tsv)

          AZURE_STORAGE_ACCOUNT_NAME=$(az webapp config appsettings list \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group rg-medusashop-prod \
            --query "[?name=='AZURE_STORAGE_ACCOUNT_NAME'].value | [0]" \
            -o tsv)

          AZURE_STORAGE_ACCOUNT_KEY=$(az webapp config appsettings list \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group rg-medusashop-prod \
            --query "[?name=='AZURE_STORAGE_ACCOUNT_KEY'].value | [0]" \
            -o tsv)

          AZURE_STORAGE_CONTAINER=$(az webapp config appsettings list \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group rg-medusashop-prod \
            --query "[?name=='AZURE_STORAGE_CONTAINER'].value | [0]" \
            -o tsv)

          echo "database_url=$DATABASE_URL" >> $GITHUB_OUTPUT
          echo "redis_url=$REDIS_URL" >> $GITHUB_OUTPUT
          echo "azure_storage_account_name=$AZURE_STORAGE_ACCOUNT_NAME" >> $GITHUB_OUTPUT
          echo "::add-mask::$AZURE_STORAGE_ACCOUNT_KEY"
          echo "azure_storage_account_key=$AZURE_STORAGE_ACCOUNT_KEY" >> $GITHUB_OUTPUT
          echo "azure_storage_container=$AZURE_STORAGE_CONTAINER" >> $GITHUB_OUTPUT

      - name: Get ACR credentials
        id: get-acr
        run: |
          ACR_USERNAME=$(az rest --method post \
            --uri "https://management.azure.com/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/rg-medusashop-prod/providers/Microsoft.ContainerRegistry/registries/${{ env.ACR_NAME }}/listCredentials?api-version=2023-01-01-preview" \
            --query "username" -o tsv)

          ACR_PASSWORD=$(az rest --method post \
            --uri "https://management.azure.com/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/rg-medusashop-prod/providers/Microsoft.ContainerRegistry/registries/${{ env.ACR_NAME }}/listCredentials?api-version=2023-01-01-preview" \
            --query "passwords[0].value" -o tsv)

          echo "username=$ACR_USERNAME" >> $GITHUB_OUTPUT
          echo "::add-mask::$ACR_PASSWORD"
          echo "password=$ACR_PASSWORD" >> $GITHUB_OUTPUT

      - name: Get VNet subnet for Container Instances
        id: get-subnet
        run: |
          SUBNET_ID=$(az network vnet subnet show \
            --resource-group rg-medusashop-prod \
            --vnet-name vnet-medusashop-prod \
            --name snet-aci \
            --query "id" -o tsv)

          LOCATION=$(az network vnet show \
            --resource-group rg-medusashop-prod \
            --name vnet-medusashop-prod \
            --query "location" -o tsv)

          echo "subnet_id=$SUBNET_ID" >> $GITHUB_OUTPUT
          echo "location=$LOCATION" >> $GITHUB_OUTPUT

      - name: Run database seeder
        run: |
          CONTAINER_NAME="medusa-seeder-${{ github.sha }}"

          echo "Creating seeder container in location ${{ steps.get-subnet.outputs.location }}..."
          az container create \
            --resource-group rg-medusashop-prod \
            --name $CONTAINER_NAME \
            --image ${{ env.ACR_NAME }}.azurecr.io/db-seeder:latest \
            --os-type Linux \
            --subnet "${{ steps.get-subnet.outputs.subnet_id }}" \
            --registry-login-server "${{ env.ACR_NAME }}.azurecr.io" \
            --registry-username "${{ steps.get-acr.outputs.username }}" \
            --registry-password "${{ steps.get-acr.outputs.password }}" \
            --environment-variables \
              DATABASE_URL="${{ steps.get-config.outputs.database_url }}" \
              REDIS_URL="${{ steps.get-config.outputs.redis_url }}" \
              AZURE_STORAGE_ACCOUNT_NAME="${{ steps.get-config.outputs.azure_storage_account_name }}" \
              AZURE_STORAGE_ACCOUNT_KEY="${{ steps.get-config.outputs.azure_storage_account_key }}" \
              AZURE_STORAGE_CONTAINER="${{ steps.get-config.outputs.azure_storage_container }}" \
              NODE_ENV=production \
            --restart-policy Never \
            --cpu 1 \
            --memory 1.5 \
            --location "${{ steps.get-subnet.outputs.location }}"

          echo "Waiting for seeder to complete..."
          MAX_ATTEMPTS=60
          ATTEMPT=0
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            STATE=$(az container show \
              --resource-group rg-medusashop-prod \
              --name $CONTAINER_NAME \
              --query "instanceView.state" -o tsv 2>/dev/null || echo "Unknown")

            if [ "$STATE" = "Succeeded" ] || [ "$STATE" = "Failed" ] || [ "$STATE" = "Terminated" ]; then
              echo "Container finished with state: $STATE"
              break
            fi

            echo "Current state: $STATE (attempt $((ATTEMPT+1))/$MAX_ATTEMPTS)"
            sleep 5
            ATTEMPT=$((ATTEMPT+1))
          done

          echo "Seeder logs:"
          az container logs \
            --resource-group rg-medusashop-prod \
            --name $CONTAINER_NAME

          echo "Cleaning up container..."
          az container delete \
            --resource-group rg-medusashop-prod \
            --name $CONTAINER_NAME \
            --yes

      - name: Logout from Azure
        run: az logout
        if: always()
