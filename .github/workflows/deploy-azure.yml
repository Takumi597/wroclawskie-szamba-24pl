name: Deploy Medusa to Azure (Docker)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  ACR_NAME: 'acrmedusashopprod'
  AZURE_WEBAPP_NAME_MEDUSA: 'app-medusashop-prod'
  IMAGE_NAME_MEDUSA: 'medusa'
  AZURE_WEBAPP_NAME_STOREFRONT: 'storefront-medusashop-prod'
  NODE_VERSION: 'lts/*'

jobs:
  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    continue-on-error: true
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  sast:
    name: SAST Scanning
    runs-on: ubuntu-latest
    needs: sonarcloud
    permissions:
      security-events: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run npm audit on medusa
        run: |
          cd wroclawskie-szamba-medusa
          npm audit --audit-level=high --json > ../audit-results.json || true
          cat ../audit-results.json
        continue-on-error: true

      - name: Check for critical vulnerabilities
        run: |
          CRITICAL=$(cat audit-results.json | jq '.metadata.vulnerabilities.critical // 0')
          HIGH=$(cat audit-results.json | jq '.metadata.vulnerabilities.high // 0')

          echo "Critical vulnerabilities: $CRITICAL"
          echo "High vulnerabilities: $HIGH"

          if [ "$CRITICAL" -gt "0" ]; then
            echo "❌ CRITICAL vulnerabilities found! Check failed."
            exit 1
          fi

          if [ "$HIGH" -gt "100" ]; then
            echo "⚠️  Too many HIGH vulnerabilities found! Check failed."
            exit 1
          fi

      - name: Run npm audit on storefront
        run: |
          cd wroclawskie-szamba-storefront
          npm audit --audit-level=high --json > ../audit-results.json || true
          cat ../audit-results.json
        continue-on-error: true

      - name: Check for critical vulnerabilities
        run: |
          CRITICAL=$(cat audit-results.json | jq '.metadata.vulnerabilities.critical // 0')
          HIGH=$(cat audit-results.json | jq '.metadata.vulnerabilities.high // 0')

          echo "Critical vulnerabilities: $CRITICAL"
          echo "High vulnerabilities: $HIGH"

          if [ "$CRITICAL" -gt "0" ]; then
            echo "❌ CRITICAL vulnerabilities found! Check failed."
            exit 1
          fi

          if [ "$HIGH" -gt "10" ]; then
            echo "⚠️  Too many HIGH vulnerabilities found! Check failed."
            exit 1
          fi

  # Job 4: Build and Deploy Medusa Backend
  deploy_medusa:
    name: Build & Deploy Medusa Backend
    runs-on: ubuntu-latest
    needs: sast

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Build Medusa
        run: |
          npm ci
          npm run build
          cd .medusa/server
          npm ci
        working-directory: wroclawskie-szamba-medusa

      # Deploy web app by using Azure credentials
      - uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME_MEDUSA }}
          package: wroclawskie-szamba-medusa/.medusa/server

      - name: Logout from Azure
        run: az logout

  # Job 4: Build and Deploy Storefront
  deploy_storefront:
    name: Build & Deploy Storefront
    runs-on: ubuntu-latest
    needs: sast

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Build Storefront
        run: |
          npm ci
          npm run build
        working-directory: wroclawskie-szamba-storefront

      # Deploy web app by using Azure credentials
      - uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME_STOREFRONT }}
          package: wroclawskie-szamba-storefront

      - name: Logout from Azure
        run: az logout

  security-monitoring:
    name: Configure Security Monitoring
    runs-on: ubuntu-latest
    needs: [deploy_medusa, deploy_storefront]

    steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get Application Insights workspace ID
        id: get-appinsights
        run: |
          WORKSPACE_ID=$(az monitor app-insights component show \
            --app appi-medusashop-prod \
            --resource-group rg-medusashop-prod \
            --query "workspaceResourceId" -o tsv)
          echo "workspace_id=$WORKSPACE_ID" >> $GITHUB_OUTPUT

      - name: IDS Alert - General Failed Auth
        run: |
          az monitor scheduled-query create \
            --name "ids-failed-auth-general" \
            --resource-group rg-medusashop-prod \
            --scopes "${{ steps.get-appinsights.outputs.workspace_id }}" \
            --condition "count 'AppRequests | where ResultCode == 401' > 10" \
            --description "IDS: Detects general authentication failures (all 401 responses)" \
            --evaluation-frequency 5m \
            --window-size 5m \
            --severity 2 \
            --auto-mitigate false || echo "Alert already exists or failed to create"
        continue-on-error: true

      - name: IDS Alert - Traffic Volume Spike
        run: |
          az monitor scheduled-query create \
            --name "ids-traffic-volume-spike" \
            --resource-group rg-medusashop-prod \
            --scopes "${{ steps.get-appinsights.outputs.workspace_id }}" \
            --condition "count 'AppRequests' > 1000" \
            --description "IDS: Detects unusual traffic volume spikes" \
            --evaluation-frequency 5m \
            --window-size 5m \
            --severity 3 \
            --auto-mitigate false || echo "Alert already exists or failed to create"
        continue-on-error: true

      - name: IDS Alert - Admin Brute Force
        run: |
          az monitor scheduled-query create \
            --name "ids-admin-brute-force" \
            --resource-group rg-medusashop-prod \
            --scopes "${{ steps.get-appinsights.outputs.workspace_id }}" \
            --condition "count 'Q1' > 0" \
            --condition-query Q1="AppRequests | where Url contains '/admin' or Url contains '/app' | where ResultCode in (401, 403) | summarize FailedAttempts = count() by ClientIP | where FailedAttempts > 5" \
            --description "IDS: Detects brute force attacks on admin panel (per IP)" \
            --evaluation-frequency 5m \
            --window-size 5m \
            --severity 2 \
            --auto-mitigate false || echo "Alert already exists or failed to create"
        continue-on-error: true

      - name: IDS Alert - SQL Injection
        run: |
          az monitor scheduled-query create \
            --name "ids-sql-injection" \
            --resource-group rg-medusashop-prod \
            --scopes "${{ steps.get-appinsights.outputs.workspace_id }}" \
            --condition "count 'Q2' > 0" \
            --condition-query Q2="AppRequests | extend QueryString = tostring(parse_url(Url)['Query Parameters']) | where QueryString contains \"'\" or QueryString contains '--' or QueryString contains 'union' or QueryString contains 'select' or QueryString contains 'drop' | summarize InjectionAttempts = count() by ClientIP | where InjectionAttempts > 3" \
            --description "IDS: Detects SQL injection attempts" \
            --evaluation-frequency 5m \
            --window-size 10m \
            --severity 2 \
            --auto-mitigate false || echo "Alert already exists or failed to create"
        continue-on-error: true

      - name: IDS Alert - Credential Stuffing
        run: |
          az monitor scheduled-query create \
            --name "ids-credential-stuffing" \
            --resource-group rg-medusashop-prod \
            --scopes "${{ steps.get-appinsights.outputs.workspace_id }}" \
            --condition "count 'Q3' > 0" \
            --condition-query Q3="AppRequests | where Url contains '/auth/login' or Url contains '/admin/auth' | where ResultCode == 401 | summarize FailedLogins = count() by ClientIP | where FailedLogins > 10" \
            --description "IDS: Detects credential stuffing attacks" \
            --evaluation-frequency 5m \
            --window-size 5m \
            --severity 2 \
            --auto-mitigate false || echo "Alert already exists or failed to create"
        continue-on-error: true

      - name: IDS Alert - Session Hijacking
        run: |
          az monitor scheduled-query create \
            --name "ids-session-hijacking" \
            --resource-group rg-medusashop-prod \
            --scopes "${{ steps.get-appinsights.outputs.workspace_id }}" \
            --condition "count 'Q4' > 0" \
            --condition-query Q4="AppRequests | extend SessionId = tostring(parse_json(Properties).sessionId) | where isnotempty(SessionId) | summarize UniqueIPs = dcount(ClientIP), Countries = dcount(ClientCountryOrRegion) by SessionId | where UniqueIPs > 1 or Countries > 1" \
            --description "IDS: Detects session hijacking attempts" \
            --evaluation-frequency 5m \
            --window-size 10m \
            --severity 2 \
            --auto-mitigate false || echo "Alert already exists or failed to create"
        continue-on-error: true

      - name: IDS Alert - DDoS Detection
        run: |
          az monitor scheduled-query create \
            --name "ids-ddos-detection" \
            --resource-group rg-medusashop-prod \
            --scopes "${{ steps.get-appinsights.outputs.workspace_id }}" \
            --condition "count 'Q5' > 0" \
            --condition-query Q5="AppRequests | summarize RequestsPerMinute = count() by ClientIP | where RequestsPerMinute > 100" \
            --description "IDS: Detects potential DDoS attacks" \
            --evaluation-frequency 1m \
            --window-size 1m \
            --severity 1 \
            --auto-mitigate false || echo "Alert already exists or failed to create"
        continue-on-error: true

      - name: IDS Alert - Traffic Anomalies
        run: |
          az monitor scheduled-query create \
            --name "ids-traffic-anomalies" \
            --resource-group rg-medusashop-prod \
            --scopes "${{ steps.get-appinsights.outputs.workspace_id }}" \
            --condition "count 'Q6' > 0" \
            --condition-query Q6="AppRequests | summarize TotalRequests = count(), ErrorRate = toint(countif(ResultCode >= 400) * 100.0 / count()) | where ErrorRate > 30" \
            --description "IDS: Detects traffic anomalies and high error rates" \
            --evaluation-frequency 5m \
            --window-size 5m \
            --severity 3 \
            --auto-mitigate false || echo "Alert already exists or failed to create"
        continue-on-error: true

      - name: Logout from Azure
        run: az logout
