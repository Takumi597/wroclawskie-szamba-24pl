name: Deploy Medusa to Azure (Docker)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: 'app-medusashop2-prod'
  ACR_NAME: 'acrmedusashop2prod'
  IMAGE_NAME: 'medusa'

jobs:
  # Job 1: SAST - Static Application Security Testing
  sast:
    name: SAST Scanning
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run npm audit
        run: |
          cd wroclawskie-szamba-medusa
          npm audit --audit-level=high --json > ../audit-results.json || true
          cat ../audit-results.json
        continue-on-error: true

      - name: Check for critical vulnerabilities
        run: |
          CRITICAL=$(cat audit-results.json | jq '.metadata.vulnerabilities.critical // 0')
          HIGH=$(cat audit-results.json | jq '.metadata.vulnerabilities.high // 0')

          echo "Critical vulnerabilities: $CRITICAL"
          echo "High vulnerabilities: $HIGH"

          if [ "$CRITICAL" -gt "0" ]; then
            echo "❌ CRITICAL vulnerabilities found! Build failed."
            exit 1
          fi

          if [ "$HIGH" -gt "100" ]; then
            echo "⚠️  Too many HIGH vulnerabilities found! Build failed."
            exit 1
          fi

  # Job 2: Build and Push Docker Image
  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: sast

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Azure Container Registry
        run: |
          az acr login --name ${{ env.ACR_NAME }}

      - name: Build Medusa image
        run: |
          docker build \
            -f medusa.dockerfile \
            -t ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            -t ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest \
            .

      - name: Push Medusa image
        run: |
          docker push ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest

      - name: Build DB Seeder image
        run: |
          docker build \
            -f db_seeder.dockerfile \
            -t ${{ env.ACR_NAME }}.azurecr.io/db-seeder:${{ github.sha }} \
            -t ${{ env.ACR_NAME }}.azurecr.io/db-seeder:latest \
            .

      - name: Push DB Seeder image
        run: |
          docker push ${{ env.ACR_NAME }}.azurecr.io/db-seeder:${{ github.sha }}
          docker push ${{ env.ACR_NAME }}.azurecr.io/db-seeder:latest

      - name: Build Storefront image
        run: |
          docker build --no-cache --pull \
            -f storefront.dockerfile \
            -t ${{ env.ACR_NAME }}.azurecr.io/storefront:${{ github.sha }} \
            -t ${{ env.ACR_NAME }}.azurecr.io/storefront:latest \
            .

      - name: Push Storefront image
        run: |
          docker push ${{ env.ACR_NAME }}.azurecr.io/storefront:${{ github.sha }}
          docker push ${{ env.ACR_NAME }}.azurecr.io/storefront:latest

      - name: Logout from Azure
        run: az logout
        if: always()

  # Job 3: DAST - Dynamic Application Security Testing (on staging)
  dast:
    name: DAST Scanning
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: ${{ secrets.STAGING_URL }}
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
          fail_action: false
          allow_issue_writing: false

      - name: SSL Labs Security Check
        run: |
          docker run --rm ssllabs/ssllabs-scan \
            --grade=B \
            --verbosity=info \
            ${{ secrets.STAGING_URL }}
        continue-on-error: true

  # Job 4: Deploy to Azure
  deploy:
    name: Deploy to Azure App Service
    runs-on: ubuntu-latest
    needs: [sast, build-and-push]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: 'production'
      url: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net

    steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Restart App Service to pull latest image
        run: |
          az webapp restart \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group rg-medusashop2-prod

      - name: Restart Storefront App Service to pull latest image
        run: |
          az webapp restart \
            --name storefront-medusashop2-prod \
            --resource-group rg-medusashop2-prod

      - name: Wait for container to start
        run: |
          echo "Waiting for container to pull image and start..."
          sleep 90

      - name: Health check
        run: |
          echo "Checking application health..."
          for i in {1..10}; do
            if curl -f https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/health; then
              echo "✅ Health check passed!"
              exit 0
            fi
            echo "Attempt $i failed, retrying in 10s..."
            sleep 10
          done
          echo "❌ Health check failed after 10 attempts"
          exit 1

      - name: Storefront health check
        run: |
          echo "Checking storefront health..."
          for i in {1..10}; do
            if curl -f -I https://storefront-medusashop2-prod.azurewebsites.net/; then
              echo "✅ Storefront health check passed!"
              exit 0
            fi
            echo "Attempt $i failed, retrying in 10s..."
            sleep 10
          done
          echo "⚠️ Storefront health check failed after 10 attempts (non-critical)"
          exit 0

      - name: Logout from Azure
        run: az logout
        if: always()

  # Job 5: Seed Database
  seed-database:
    name: Seed Database
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get connection strings from App Service
        id: get-config
        run: |
          DATABASE_URL=$(az webapp config appsettings list \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group rg-medusashop2-prod \
            --query "[?name=='DATABASE_URL'].value | [0]" \
            -o tsv)

          REDIS_URL=$(az webapp config appsettings list \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group rg-medusashop2-prod \
            --query "[?name=='REDIS_URL'].value | [0]" \
            -o tsv)

          echo "database_url=$DATABASE_URL" >> $GITHUB_OUTPUT
          echo "redis_url=$REDIS_URL" >> $GITHUB_OUTPUT

      - name: Get ACR credentials
        id: get-acr
        run: |
          ACR_USERNAME=$(az rest --method post \
            --uri "https://management.azure.com/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/rg-medusashop2-prod/providers/Microsoft.ContainerRegistry/registries/${{ env.ACR_NAME }}/listCredentials?api-version=2023-01-01-preview" \
            --query "username" -o tsv)

          ACR_PASSWORD=$(az rest --method post \
            --uri "https://management.azure.com/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/rg-medusashop2-prod/providers/Microsoft.ContainerRegistry/registries/${{ env.ACR_NAME }}/listCredentials?api-version=2023-01-01-preview" \
            --query "passwords[0].value" -o tsv)

          echo "username=$ACR_USERNAME" >> $GITHUB_OUTPUT
          echo "::add-mask::$ACR_PASSWORD"
          echo "password=$ACR_PASSWORD" >> $GITHUB_OUTPUT

      - name: Get VNet subnet for Container Instances
        id: get-subnet
        run: |
          SUBNET_ID=$(az network vnet subnet show \
            --resource-group rg-medusashop2-prod \
            --vnet-name vnet-medusashop2-prod \
            --name snet-aci \
            --query "id" -o tsv)

          LOCATION=$(az network vnet show \
            --resource-group rg-medusashop2-prod \
            --name vnet-medusashop2-prod \
            --query "location" -o tsv)

          echo "subnet_id=$SUBNET_ID" >> $GITHUB_OUTPUT
          echo "location=$LOCATION" >> $GITHUB_OUTPUT

      - name: Run database seeder
        run: |
          CONTAINER_NAME="medusa-seeder-${{ github.sha }}"

          echo "Creating seeder container in location ${{ steps.get-subnet.outputs.location }}..."
          az container create \
            --resource-group rg-medusashop2-prod \
            --name $CONTAINER_NAME \
            --image ${{ env.ACR_NAME }}.azurecr.io/db-seeder:latest \
            --os-type Linux \
            --subnet "${{ steps.get-subnet.outputs.subnet_id }}" \
            --registry-login-server "${{ env.ACR_NAME }}.azurecr.io" \
            --registry-username "${{ steps.get-acr.outputs.username }}" \
            --registry-password "${{ steps.get-acr.outputs.password }}" \
            --environment-variables \
              DATABASE_URL="${{ steps.get-config.outputs.database_url }}" \
              REDIS_URL="${{ steps.get-config.outputs.redis_url }}" \
              NODE_ENV=production \
            --restart-policy Never \
            --cpu 1 \
            --memory 1.5 \
            --location "${{ steps.get-subnet.outputs.location }}"

          echo "Waiting for seeder to complete..."
          MAX_ATTEMPTS=60
          ATTEMPT=0
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            STATE=$(az container show \
              --resource-group rg-medusashop2-prod \
              --name $CONTAINER_NAME \
              --query "instanceView.state" -o tsv 2>/dev/null || echo "Unknown")

            if [ "$STATE" = "Succeeded" ] || [ "$STATE" = "Failed" ] || [ "$STATE" = "Terminated" ]; then
              echo "Container finished with state: $STATE"
              break
            fi

            echo "Current state: $STATE (attempt $((ATTEMPT+1))/$MAX_ATTEMPTS)"
            sleep 5
            ATTEMPT=$((ATTEMPT+1))
          done

          echo "Seeder logs:"
          az container logs \
            --resource-group rg-medusashop2-prod \
            --name $CONTAINER_NAME

          echo "Cleaning up container..."
          az container delete \
            --resource-group rg-medusashop2-prod \
            --name $CONTAINER_NAME \
            --yes

      - name: Logout from Azure
        run: az logout
        if: always()

  # Job 6: Post-deployment security monitoring
  security-monitoring:
    name: Configure Security Monitoring
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get Application Insights workspace ID
        id: get-appinsights
        run: |
          WORKSPACE_ID=$(az monitor app-insights component show \
            --app appi-medusashop2-prod \
            --resource-group rg-medusashop2-prod \
            --query "workspaceResourceId" -o tsv)
          echo "workspace_id=$WORKSPACE_ID" >> $GITHUB_OUTPUT

      - name: Create alert for failed login attempts
        run: |
          az monitor scheduled-query create \
            --name "high-failed-login-attempts" \
            --resource-group rg-medusashop2-prod \
            --scopes "${{ steps.get-appinsights.outputs.workspace_id }}" \
            --condition "count > 10" \
            --condition-query "requests | where resultCode == 401 | summarize AggregatedValue=count()" \
            --description "Alert when failed login attempts (401) exceed threshold" \
            --evaluation-frequency 5m \
            --window-size 5m \
            --severity 2 \
            --auto-mitigate false || echo "Alert already exists or failed to create"
        continue-on-error: true

      - name: Create alert for unusual traffic
        run: |
          az monitor scheduled-query create \
            --name "unusual-traffic-pattern" \
            --resource-group rg-medusashop2-prod \
            --scopes "${{ steps.get-appinsights.outputs.workspace_id }}" \
            --condition "count > 1000" \
            --condition-query "requests | summarize AggregatedValue=count()" \
            --description "Alert on unusual traffic spikes" \
            --evaluation-frequency 5m \
            --window-size 5m \
            --severity 3 \
            --auto-mitigate false || echo "Alert already exists or failed to create"
        continue-on-error: true

      - name: Logout from Azure
        run: az logout
        if: always()
