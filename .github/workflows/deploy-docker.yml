name: Deploy Medusa to Azure (Docker)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: 'app-medusashop-prod'
  ACR_NAME: 'acrmedusashopprod'
  IMAGE_NAME: 'medusa'

jobs:
  # Job 1: SAST - Static Application Security Testing
  sast:
    name: SAST Scanning
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run npm audit
        run: |
          cd wroclawskie-szamba-medusa
          npm audit --audit-level=high --json > ../audit-results.json || true
          cat ../audit-results.json
        continue-on-error: true

      - name: Check for critical vulnerabilities
        run: |
          CRITICAL=$(cat audit-results.json | jq '.metadata.vulnerabilities.critical // 0')
          HIGH=$(cat audit-results.json | jq '.metadata.vulnerabilities.high // 0')

          echo "Critical vulnerabilities: $CRITICAL"
          echo "High vulnerabilities: $HIGH"

          if [ "$CRITICAL" -gt "0" ]; then
            echo "❌ CRITICAL vulnerabilities found! Build failed."
            exit 1
          fi

          if [ "$HIGH" -gt "100" ]; then
            echo "⚠️  Too many HIGH vulnerabilities found! Build failed."
            exit 1
          fi

  # Job 2: Build and Push Docker Image
  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: sast

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Azure Container Registry
        run: |
          az acr login --name ${{ env.ACR_NAME }}

      - name: Build Docker image
        run: |
          docker build \
            -f medusa.dockerfile \
            -t ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            -t ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest \
            .

      - name: Push Docker image
        run: |
          docker push ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest

      - name: Logout from Azure
        run: az logout
        if: always()

  # Job 3: DAST - Dynamic Application Security Testing (on staging)
  dast:
    name: DAST Scanning
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: ${{ secrets.STAGING_URL }}
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
          fail_action: false
          allow_issue_writing: false

      - name: SSL Labs Security Check
        run: |
          docker run --rm ssllabs/ssllabs-scan \
            --grade=B \
            --verbosity=info \
            ${{ secrets.STAGING_URL }}
        continue-on-error: true

  # Job 4: Deploy to Azure
  deploy:
    name: Deploy to Azure App Service
    runs-on: ubuntu-latest
    needs: [sast, build-and-push]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: 'production'
      url: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net

    steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Restart App Service to pull latest image
        run: |
          az webapp restart \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group rg-medusashop-prod

      - name: Wait for container to start
        run: |
          echo "Waiting for container to pull image and start..."
          sleep 90

      - name: Health check
        run: |
          echo "Checking application health..."
          for i in {1..10}; do
            if curl -f https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/health; then
              echo "✅ Health check passed!"
              exit 0
            fi
            echo "Attempt $i failed, retrying in 10s..."
            sleep 10
          done
          echo "❌ Health check failed after 10 attempts"
          exit 1

      - name: Logout from Azure
        run: az logout
        if: always()

  # Job 5: Post-deployment security monitoring
  security-monitoring:
    name: Configure Security Monitoring
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create alert for failed logins
        run: |
          az monitor metrics alert create \
            --name "high-failed-login-attempts" \
            --resource-group rg-medusashop-prod \
            --scopes "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/rg-medusashop-prod/providers/microsoft.insights/components/appi-medusashop-prod" \
            --condition "count requests < 5 where resultCode == 401" \
            --window-size 5m \
            --evaluation-frequency 1m \
            --description "Alert when failed login attempts exceed threshold"
        continue-on-error: true

      - name: Create alert for unusual traffic
        run: |
          az monitor metrics alert create \
            --name "unusual-traffic-pattern" \
            --resource-group rg-medusashop-prod \
            --scopes "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/rg-medusashop-prod/providers/microsoft.insights/components/appi-medusashop-prod" \
            --condition "avg requests > 1000" \
            --window-size 5m \
            --evaluation-frequency 1m \
            --description "Alert on unusual traffic spikes"
        continue-on-error: true

      - name: Logout from Azure
        run: az logout
